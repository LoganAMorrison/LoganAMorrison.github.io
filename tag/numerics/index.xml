<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>numerics | Logan A. Morrison</title>
    <link>https://loganamorrison.github.io/tag/numerics/</link>
      <atom:link href="https://loganamorrison.github.io/tag/numerics/index.xml" rel="self" type="application/rss+xml" />
    <description>numerics</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 25 Aug 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://loganamorrison.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>numerics</title>
      <link>https://loganamorrison.github.io/tag/numerics/</link>
    </image>
    
    <item>
      <title>Solving the Boltzmann Equation</title>
      <link>https://loganamorrison.github.io/post/solving-boltzman-equation/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://loganamorrison.github.io/post/solving-boltzman-equation/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this notebook, we will investigate how to solve the Boltzmann equation in
order to determine the relic abundance of a species. Our focus will be on
a species which represents a dark matter (DM) particle. We will assume that the
dark matter interacts with the standard model (SM) through a massive mediator
with interactions that look like
$\bar{\chi}\chi\to \mathrm{SM}_{1} + \mathrm{SM}_{2}$, i.e. through a $2\to2$
interaction. For these types of interactions, the Boltzmann equation takes the
form of:
$$\begin{align}
\dfrac{dn}{dt} + 3Hn = -\langle\sigma v\rangle(n^2 - n_{\mathrm{eq}}^2)
\end{align}$$
where $n$ is the DM number density, $n_{\mathrm{eq}}$ is the DM equilibrium
number density, $H$ is the hubble constant and $\langle\sigma v\rangle$ is the
annihilation cross section for DM into SM particles. As is, this equation is
in poor form. We will make several changes to bring it into a more suitible
form for numerically solving.&lt;/p&gt;
&lt;p&gt;Our first change will be to define the so called comoving number density, $Y$.
This will be defined as:
$$\begin{align}
Y = \dfrac{n}{s}
\end{align}$$
where $s$ is the SM entropy density. Note that the total SM entropy is
conserved, i.e. $a^3s = \mathrm{constant}$ with $a$ being the scale factor of
the universe. This implies that:
$$\begin{align}
\dfrac{d}{dt}a^3s = 3\dfrac{da}{dt}a^2s + a^3\dfrac{ds}{dt} = 0
\end{align}$$
If we rearange this equation and recall that $d\log(a)/dt = H$, we find that:
$$\begin{align}
\dfrac{ds}{dt} = -3\dfrac{1}{a}\dfrac{da}{dt}s = -3Hs
\end{align}$$
This relation will allow us to determine $dY/dt$:
$$\begin{align}
\dfrac{1}{s}\dfrac{dn}{dt} &amp;amp;= \dfrac{dY}{dt} - 3HY
\end{align}$$
Therefore, the Boltzmann equation for $Y$ is:
$$\begin{align}
\dfrac{dY}{dt} = -s\langle\sigma v\rangle(Y^2 - Y_{\mathrm{eq}}^2)
\end{align}$$
where we defined $Y_{\mathrm{eq}} = n_{\mathrm{eq}}/s$. Next, we will change
independent variables from time to temperature. To do this, we again us
$\dot{s}/s = -3H$. Using the explict form $s=2\pi^2/45 hT^3$
($h$ being the number of d.o.f. in entropy),
one finds that:
$$\begin{align}
-3H = \dfrac{1}{s}\dfrac{ds}{dt} =
\dfrac{3}{T}\left(1 + \dfrac{T}{3h}\dfrac{dh}{dT}\right)
\dfrac{dT}{dt}
\end{align}$$
Therefore,
$$\begin{align}
\dfrac{dt}{dT} =-\dfrac{1}{HT}\left(1 + \dfrac{T}{3h}\dfrac{dh}{dT}\right)
\end{align}$$
We can use this relationship to determine $dY/dT$:
$$\begin{align}
\dfrac{dY}{dT} = \dfrac{dt}{dT}\dfrac{dY}{dt} =
\dfrac{s}{HT}\left(1 + \dfrac{T}{3h}\dfrac{dh}{dT}\right)
\langle\sigma v\rangle(Y^2 - Y_{\mathrm{eq}}^2)
\end{align}$$
Another change people usually make is again changing the indepednent variable
from $T\to x = m/T$ where $m$ is the mass of the DM particle. If we make this
change, we find that:
$$\begin{align}
\dfrac{dY}{dx} =-
\dfrac{s}{Hx}\left(1 + \dfrac{T}{3h}\dfrac{dh}{dT}\right)
\langle\sigma v\rangle(Y^2 - Y_{\mathrm{eq}}^2)
\end{align}$$
We can expand out the definitions of $s$ and $H=\sqrt{8\pi\rho/3}/M_{\mathrm{pl}}$
$$\begin{align}
H = \sqrt{\dfrac{8\pi G}{3}\rho} =
\sqrt{\dfrac{8\pi^3}{90}}\sqrt{g}\dfrac{T^2}{M_{\mathrm{pl}}}
\end{align}$$
to obtain:
$$\begin{align}
\boxed{\dfrac{dY}{dx} =-
\sqrt{\dfrac{\pi}{45}}\dfrac{m M_{\mathrm{pl}}}{x^2}g^{1/2}_{\star}
\langle\sigma v\rangle(Y^2 - Y_{\mathrm{eq}}^2)}
\end{align}$$
where we defined:
$$\begin{align}
g^{1/2}_{\star} \equiv \left(1 + \dfrac{T}{3h}\dfrac{dh}{dT}\right)
\dfrac{h}{\sqrt{g}}
\end{align}$$
This is typically how people quote the Boltzmann equation. However, one final
set of modifications needs to be made for numerical purposes. $Y$ can vary
over many orders of magnitude. Thus, it is very useful to define
$W\equiv\log(Y)$. Then, $W$ only undergoes order $1$ changes. Additionally, it
is useful to work with the $\log(x)$ instead of $x$. Making these changes
we find that:
$$\begin{align}
\boxed{\dfrac{dW}{d\log(x)} =-
\sqrt{\dfrac{\pi}{45}}\dfrac{m M_{\mathrm{pl}}}{x}g^{1/2}_{\star}
\langle\sigma v\rangle(e^{W} - e^{2W_{\mathrm{eq}}-W})}
\end{align}$$
In the next sections, we will solve this equation.&lt;/p&gt;
&lt;h2 id=&#34;simple-model&#34;&gt;Simple Model&lt;/h2&gt;
&lt;p&gt;In many cases, the thermally averaged annihilation cross section can be brought
into the form:
$$\begin{align}
\langle\sigma v\rangle = \langle\sigma v\rangle_{0}x^{-n} +
\mathrm{O}(x^{-n-1})
\end{align}$$
In this form, we can simplify the Boltzmann equation to:
$$\begin{align}
\dfrac{dW}{d\log(x)} =-
\sqrt{\dfrac{\pi}{45}}\dfrac{m M_{\mathrm{pl}}}{x^{n+1}}g^{1/2}_{\star}
\langle\sigma v\rangle_{0}(e^{W} - e^{2W_{\mathrm{eq}}-W})
\end{align}$$&lt;/p&gt;
&lt;h4 id=&#34;evolution-of-w--logns&#34;&gt;Evolution of $W = \log(n/s)$&lt;/h4&gt;
&lt;p&gt;Now, let&amp;rsquo;s define a model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;using DarkSUN

mutable struct DarkMatterModel
  χ::ThermodynamicFermion
  n::Int64
  sm::StandardModel
  σ0::Float64
end

&amp;quot;&amp;quot;&amp;quot;
  DarkMatterModel(m::Float64, n::Int64, σ0::Float64)

Default constructor for DM model

# Arguments
- `m::Float64`: DM mass
- `n::Int64`: interaction order - 0: s-wave, 1: p-wave and so on.
- `σ0::Float64`: thermal cross section coefficient
&amp;quot;&amp;quot;&amp;quot;
function DarkMatterModel(m::Float64, n::Int64, σ0::Float64)
  χ = ThermodynamicFermion(m, 2.0)
  DarkMatterModel(χ, n, StandardModel(), σ0)
end;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To solve the Boltzmann equation, we will use &lt;code&gt;DifferentialEquantions.jl&lt;/code&gt;
(for solving the differential equation) and &lt;code&gt;DarkSUN&lt;/code&gt; (for thermal functions
such as $g^{1/2}_{\star}$ and $n_{\mathrm{eq}}$.) Let&amp;rsquo;s define the Boltzmann
equation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;using DifferentialEquations

const Mpl = 1.220910e19

&amp;quot;&amp;quot;&amp;quot;
  boltzmann(w, p, logx)

Boltzmann equation in `DifferentialEquations.jl` format.

# Arguments
- `dW::Array{Float64, 1}`: derivative of log of number density over SM entropy density
- `W::Array{Float64, 1}`: log of number density over SM entropy density
- `model::DarkMatterModel`: model
- `logx::Float64`: log of mass over temperature
&amp;quot;&amp;quot;&amp;quot;
function boltzmann!(dW::Array{Float64, 1}, W::Array{Float64, 1},
                   model::DarkMatterModel, logx::Float64)
  x::Float64 = exp(logx)
  # update the temperature
  model.χ.T = model.χ.mass / x
  model.sm.T = model.χ.mass / x
  pf::Float64 = (-sqrt(π/45) * model.σ0 * model.χ.mass * Mpl * sqrt_gstar(model.sm) / x^(model.n+1))
  Weq::Float64 = log_neq(model.χ) - log_entropy_density(model.sm)
  dW[1] = pf * (exp(W[1]) - exp(2Weq - W[1]))
end


&amp;quot;&amp;quot;&amp;quot;
  jacobian(w, p, logx)

Jacobian of the boltzmann equation in `DifferentialEquations.jl` format.

# Arguments
- `J::Array{Float64, 2}`: derivative of log of number density over SM entropy density
- `W::Array{Float64, 1}`: log of number density over SM entropy density
- `model::DarkMatterModel`: model
- `logx::Float64`: log of mass over temperature
&amp;quot;&amp;quot;&amp;quot;
function jacobian!(J::Array{Float64, 2}, W::Array{Float64, 1},
                   model::DarkMatterModel, logx::Float64)
  x::Float64 = exp(logx)
  # update the temperature
  model.χ.T = model.χ.mass / x
  model.sm.T = model.χ.mass / x
  pf::Float64 = (-sqrt(π/45) * model.σ0 * model.χ.mass * Mpl * sqrt_gstar(model.sm) / x^(model.n+1))
  Weq::Float64 = log_neq(model.χ) - log_entropy_density(model.sm)
  J[1,1] = pf * (exp(W[1]) + exp(2Weq - W[1]))
end;

&amp;quot;&amp;quot;&amp;quot;
  solve(model, logxspan)

Solve the Boltzmann equation for the given model.

# Arguments
- `model::DarkMatterModel`: DM model
- `logxspan::Tuple{Float64}`: range of log(x)
&amp;quot;&amp;quot;&amp;quot;
function solve!(model::DarkMatterModel, logxspan::Tuple{Float64, Float64})
  # Initialize temperatures
  model.χ.T = model.χ.mass * exp(-logxspan[1])
  model.sm.T = model.χ.mass * exp(-logxspan[1])
  # Initial value for W
  W0 = log_neq(model.χ) - log_entropy_density(model.sm)
  # Create ODE problem
  ff = ODEFunction(boltzmann!;jac=jacobian!)
  prob = ODEProblem(ff,[W0],logxspan, model)
  # Solve it!
  solve(prob, Rodas5(autodiff=false));
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s solve for various values of $\sigma_{0}$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;# Values for logx
logxspan = (log(1), log(500))
σ0s = [1e-7, 1e-8, 1e-9, 1e-10]
models = [DarkMatterModel(100.0, 0, σ0) for σ0 in σ0s]
sols = [solve!(model, logxspan) for model in models];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can plot the solution:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;import PyPlot; const plt = PyPlot # python plotting
using LaTeXStrings

plt.figure(dpi=100)
for (i, sol) in enumerate(sols)
  plt.plot(sol.t, sol[1,:], label=L&amp;quot;$\sigma_{0} = $&amp;quot;*string(σ0s[i]))
end
plt.ylabel(L&amp;quot;$W$&amp;quot;, fontsize=16)
plt.xlabel(L&amp;quot;$\log(x)$&amp;quot;, fontsize=16)
plt.xlim([logxspan[1], logxspan[2]])
plt.legend()
plt.gcf()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/solving-boltzman-equation/2019-08-24-solving-the-boltzmann-equation_4_1_hu3b2444c456dd439a1d6cad1e0dd242c4_24211_10147bd2bacfaa1aa815628983cdfff4.webp 400w,
               /post/solving-boltzman-equation/2019-08-24-solving-the-boltzmann-equation_4_1_hu3b2444c456dd439a1d6cad1e0dd242c4_24211_56d2474567ca18be94e709899cdf0bb6.webp 760w,
               /post/solving-boltzman-equation/2019-08-24-solving-the-boltzmann-equation_4_1_hu3b2444c456dd439a1d6cad1e0dd242c4_24211_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://loganamorrison.github.io/post/solving-boltzman-equation/2019-08-24-solving-the-boltzmann-equation_4_1_hu3b2444c456dd439a1d6cad1e0dd242c4_24211_10147bd2bacfaa1aa815628983cdfff4.webp&#34;
               width=&#34;578&#34;
               height=&#34;442&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;relic-densities&#34;&gt;Relic Densities&lt;/h4&gt;
&lt;p&gt;Recall that the relic density is computed using:
$$\begin{align}
\Omega_{\chi} h^2 = \dfrac{s_{0}}{\rho_{c}}m_{\chi}Y(x=\infty)
\end{align}$$
where $s_{0} = 2891.2 \mathrm{cm}^{-3}$ and
$\rho_{c} =1.05375\times10^{-5}\mathrm{h}^2\mathrm{GeV}\mathrm{cm}^{-3}$. Let&amp;rsquo;s
perform the excercise of computing the relic density for values values of
$m_{\chi}$ and $\langle\sigma v\rangle_{0}$. We will then plot the contours
for which the combination $(m_{\chi}, \langle\sigma v\rangle_{0})$ gives the
correct observed relic density, which is $\Omega_{\chi}h^2=0.1198$. First,
let&amp;rsquo;s write a function to solve the Boltzmann equantion and compute the relic
density:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;const ρc = 1.05375e-5
const s₀ = 2891.2

function relic_density(model::DarkMatterModel)
  sol = solve!(model, (log(1), log(1000)))
  s₀ / ρc * model.χ.mass * exp(sol[1, end])
end;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let&amp;rsquo;s compute the relic density for DM masses between $10$ and
$10^4\mathrm{GeV}$ with cross sections between $10^{-12}$ and
$10^{-7} \mathrm{GeV}^{-2}$.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;mχs = 10 .^(range(-1, stop=4, length=150))
σ0s = 10 .^(range(-12, stop=-7, length=150))
models = [DarkMatterModel(mχ, 0, σ0) for mχ in mχs, σ0 in σ0s]
Ωh²s = [relic_density(model) for model in models];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let&amp;rsquo;s plot the contours of correct relic density:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;using Contour
const Ωh²cdm = 0.1198

cs = contour(mχs, σ0s, Ωh²s, Ωh²cdm)

plt.figure(dpi=100)
for line in lines(cs)
  xs, ys = coordinates(line)
  plt.plot(xs, ys .* 1.16733e-17 * 1e26) # convert units to 10^-26 cm^3/s
end
plt.xscale(&amp;quot;log&amp;quot;)
plt.ylabel(L&amp;quot;$\langle\sigma v\rangle_{0} \ (10^{-26}\mathrm{cm}^{3}/\mathrm{s})$&amp;quot;, fontsize=16)
plt.xlabel(L&amp;quot;$m_{\chi} \ (\mathrm{GeV})$&amp;quot;, fontsize=16)
plt.ylim([0, 6])
plt.xlim([minimum(mχs),maximum(mχs)])
plt.gcf()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/solving-boltzman-equation/2019-08-24-solving-the-boltzmann-equation_7_1_hu31f3b955834c97c4dd7a43520c87a52f_16602_83f099ab6a750d7c7e3358d385183d5e.webp 400w,
               /post/solving-boltzman-equation/2019-08-24-solving-the-boltzmann-equation_7_1_hu31f3b955834c97c4dd7a43520c87a52f_16602_412cf33d3a1dd3cf0474bbce2a0fddf1.webp 760w,
               /post/solving-boltzman-equation/2019-08-24-solving-the-boltzmann-equation_7_1_hu31f3b955834c97c4dd7a43520c87a52f_16602_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://loganamorrison.github.io/post/solving-boltzman-equation/2019-08-24-solving-the-boltzmann-equation_7_1_hu31f3b955834c97c4dd7a43520c87a52f_16602_83f099ab6a750d7c7e3358d385183d5e.webp&#34;
               width=&#34;571&#34;
               height=&#34;444&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
