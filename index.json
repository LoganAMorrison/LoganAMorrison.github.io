[{"authors":null,"categories":null,"content":"As a post-doctoral researcher, I research novel theories of dark matter, develop software to predict potential experimental signals, and use current and prospective experiments to assess the viability and potential discoverability of models. My current research projects include:\n  Developing software for accurately computing gamma-ray, positron, and neutrino spectra from GeV-scale dark matter annihilations and decays using form-factors fit to electron/positron collider data.\n  Computing spectra from dark matter annihilations and decays into sterile neutrinos with masses ranging from an eV to the Plank scale.\n  Using Sequential Neural Likelihood to chart the 24-dimensional parameter space of the minimal supersymmetric model to identify regions that both contain dark matter and explain anomalies in recent experiments probing the muon anomalous magnetic moment.\n  Determining the effects on the cosmic microwave background from models where dark matter briefly re-enters kinetic equilibrium with the Standard Model bath.\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"As a post-doctoral researcher, I research novel theories of dark matter, develop software to predict potential experimental signals, and use current and prospective experiments to assess the viability and potential discoverability of models.","tags":null,"title":"Logan A. Morrison","type":"authors"},{"authors":null,"categories":null,"content":" Making the game  ","date":1646611200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1646611200,"objectID":"654d075143268c26259ad499130cf019","permalink":"https://loganamorrison.github.io/post/learning_to_play_space_invaders/","publishdate":"2022-03-07T00:00:00Z","relpermalink":"/post/learning_to_play_space_invaders/","section":"post","summary":"A set of notes on building a Deep Q network to learn to play Space Invaders","tags":null,"title":"Learning to Play Space Invaders","type":"book"},{"authors":null,"categories":null,"content":"Our first goal will be to make a space-invaders-like game. For simplicity, we will be using pygame, as it provides a lot of functionality and is easy to use. Before getting into how we will make the game, let’s take a look at the final product:\nIn this game, we have some number of “enemies” (in this case 3) and a player (the space ship). The enemies will move around the screen while making their way downwards. The player can move around the screen as well (both in the x and y) directions. The space ship is equipped with an arsenel of missiles which it can fire at the enemies. Each time an ememy is struck by a missile, the player is reward with a certain number of points. However, if an enemy crosses the bottom of the screen, the player is penalized, and their score is reduced. If the enemy touches the spaceship, the game ends. Clearly, the goal of the game is to obtain as high a score as possible. To do this, the player must hit as many enemies as possible and stay alive as long as possible.\nImplementing the game is straightforward. We will have a loop that runs code for a single game ‘step’ while the player is still alive. The game will terminate once the player dies. The ‘step\u0026#34; will do a number of things, such as: move the game pieces (enemies, player and bullets), add/remove pieces, parse inputs by the user, determine if enemy is struck or player is struck, determine rewards, etc. The algorithm for the ‘step’ will be as follows:\n Determine the player action (move, fire bullet, quit) Update the positions of all game pieces Determine if player/enemy is hit, if enemy has left the window  If player is hit, signal end of game and penalize player If enemy is hit, remove enemy and add new one and reward the player If enemy has left window, remove and add new one and penalize player   If the player is a human, step is done. If the player is a network, return the new game state, reward and other needed information.  Let’s now dig down into the details of implementing this. The first thing we will implement is a class the hold information about the game pieces.\nTo get it out of the way, let’s import all the items we will need:\nfrom typing import List, Optional, NamedTuple from enum import Enum import pygame from random import randint, choice import numpy as np  Entity Class To make things a bit cleaner, we will make a class to hold information about each of the dynamic pieces of our game. These dynamic pieces are the enemies, the player and bullets fired by the player. We call these dynamic pieces ’entities’. We will want to know where the entity is, what its velocity is and some information about the shape and look of the entity. Let’s first make some small classes to store coordinates and attributes of the entities:\nclass Coordinate: __slots__ = (\u0026#34;x\u0026#34;, \u0026#34;y\u0026#34;) def __init__(self, x: float, y: float): self.x: float = x self.y: float = y def __add__(self, c: Coordinate): return Coordinate(self.x + c.x, self.y + c.y) def __iadd__(self, c: Coordinate): self.x += c.x self.y += c.y class EnityDimensions(NamedTuple): x: float y: float  Next, let’s write our Entity initialization:\nclass Entity: __slot__ = (\u0026#34;x\u0026#34;, \u0026#34;y\u0026#34;, \u0026#34;vx\u0026#34;, \u0026#34;vy\u0026#34;, \u0026#34;dims\u0026#34;) def __init__(self, x, y, vx, vy, dims): self.x = x self.y = y self.vx = vx self.vy = vy self.dims = dims  Next, let’s add a method for moving the entity around the game given the velocity of the entity. The change is position is related to the velocity via:\n$$ x_{\\mathrm{new}} - x_{\\mathrm{old}} = \\Delta x = \\frac{dx}{dt}\\Delta t = v_{x}\\Delta t $$\nWe will take $\\Delta t = 1$, so that $x_{\\mathrm{new}} = x_{\\mathrm{old}} + v_{x}$ (with an identical expression for $y$.)\nclass Entity: ... def move(self): \u0026#34;\u0026#34;\u0026#34; Move the player by adding velocity to position. \u0026#34;\u0026#34;\u0026#34; self.x += self.vx self.y += self.vy  The game logic Now let’s begin with the game itself. We will make a class for the game called SpaceInvaderGame. This class will hold the entire state of the game and handel the dynamics. The state will contain Entity objects for the player, enemies and bullets, the score and other aspects that we will get into later on.\nWe will also load in some images for our player, the enemies and the bullet:\n .column { float: left; width:33%; padding: 5px; }  Enemy\n Player\n Bullet\n  We load these using pygame.image.load(...).\nPLAYER_IMAGE = pygame.image.load(\u0026#34;player.png\u0026#34;) ENEMY_IMAGE = pygame.image.load(\u0026#34;enemy.png\u0026#34;) BULLET_IMAGE = pygame.image.load(\u0026#34;bullet.png\u0026#34;) PLAYER_DIMS = EnityDimensions(64, 64) ENEMY_DIMS = EnityDimensions(32, 32) BULLET_DIMS = EnityDimensions(32, 32) class SpaceInvaderGame: # Default window sizes WINDOW_HEIGHT = 600 WINDOW_WIDTH = 800 # Default speed of enemies ENEMY_VELOCITY_X = 0.5 ENEMY_VELOCITY_Y = 0.2 NUM_ENEMIES = 3 # Rewards REWARD_HIT_ENEMY = 100 REWARD_ALIVE = 0.0 REWARD_ENEMY_PASS = -100 REWARD_PLAYER_DEAD = -1000 # Player starting position PLAYER_START_X = 370.0 PLAYER_START_Y = 480.0 # Default speed of player MOVE_STRIDE = 1 BULLET_VELOCITY = -10.0 def __init__(self, player_type=0, …","date":1646611200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1646611200,"objectID":"7797ab5cc4c037ba473cff643ba9c6a9","permalink":"https://loganamorrison.github.io/post/learning_to_play_space_invaders/making_the_game/","publishdate":"2022-03-07T00:00:00Z","relpermalink":"/post/learning_to_play_space_invaders/making_the_game/","section":"post","summary":"Our first goal will be to make a space-invaders-like game. For simplicity, we will be using pygame, as it provides a lot of functionality and is easy to use. Before getting into how we will make the game, let’s take a look at the final product:","tags":null,"title":"Making the game","type":"book"},{"authors":null,"categories":null,"content":"WIP\n","date":1646611200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1646611200,"objectID":"4b6b258f1bff522370aaf4ce8accd28c","permalink":"https://loganamorrison.github.io/post/learning_to_play_space_invaders/deep-q/","publishdate":"2022-03-07T00:00:00Z","relpermalink":"/post/learning_to_play_space_invaders/deep-q/","section":"post","summary":"WIP","tags":null,"title":"Implementing the Deep-Q Agent","type":"book"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://loganamorrison.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Logan A. Morrison"],"categories":["Field Theory"],"content":"Starting from Rest Frame Suppose we know the energy spectrum $dN_{f}/{dE_{1}}$ of some product $f$ from the decay of a state $I$ in the rest frame of $I$. From this spectum, we would like to obtain the corresponding spectrum, ${dN_{f}}/{dE_{2}}$ in a boosted frame. First, assume that the four-momentum of $f$ in the initial frame is:\n$$ \\begin{aligned} p^{\\mu}_{1} \u0026amp; = \\left(E_{1}; \\vec{p}_{1}\\right) \\end{aligned} $$\nwhere $\\vec{p}_{1}$ is the three-momentum of $f$. without loss of generality, let’s assume that $\\vec{p}_{1}$ lies in the $xz$-plane: $ \\vec{p}_{1} = \\left(|\\vec{p}_{1}|\\tilde{z}_{1}, 0, |\\vec{p}_{1}|z_{1}\\right), $ with $z_{1}$ equal to the cosine of the angle $\\vec{p}_{1}$ makes with the $z$ axis and $\\tilde{z}_{1} = \\sqrt{1-z_{1}^2}$. Assume we boost along the $z$-axis, we can translate this four-momentum in the new frame using $p^{\\mu}{2} = {\\Lambda}{^\\mu\\nu}p^{\\nu}{1}$ with $$\\begin{aligned} \\tensor[]{\\Lambda}{^\\mu\\nu} = \\mqty(\\gamma \u0026amp; 0 \u0026amp; 0 \u0026amp; \\gamma\\beta \\0\u0026amp;1\u0026amp;0\u0026amp;0\\0\u0026amp;0\u0026amp;1\u0026amp;0\\\\beta\\gamma\u0026amp;0\u0026amp;0\u0026amp;\\gamma)\\end{aligned}$$ Explicity, $p^{\\mu}{2}$ is given by: $$\\begin{aligned} p^{\\mu}{2} \u0026amp; = \\qty(E_{2}; \\bm{p}{2}) \\ E{2} \u0026amp; = \\gamma E_{1} + \\beta\\gamma\\abs{\\bm{p}{1}}z{1} \\ \\bm{p}{2} \u0026amp; = \\qty(\\abs{\\bm{p}{1}}\\tilde{z}{1}, 0, \\beta\\gamma E{1} + \\gamma\\abs{\\bm{p}{1}}z{1})\\end{aligned}$$ Notice that $E_{2}$ explicity depends on $z_{1}$, which we have integrated over in obtaining $\\dv*{N_{f}}{E_{1}}$. To reintroduce $z_{1}$, we use: $$\\begin{aligned} {\\dv{N_{f}}{E_{1}}}(E_{1}) \u0026amp; = \\int_{-1}^{1}\\dd{z} \\pdv{N_{f}}{E_{1}}{z_{1}}, \u0026amp; \\pdv{N_{f}}{E_{1}}{z_{1}} \u0026amp; = \\frac{1}{2} \\dv{N_{f}}{E_{1}}\\end{aligned}$$ In order to translate this expression into $\\dv*{N_{f}}{E_{2}}$, we have two options. The first is to introduce a $\\delta$-function enforcing the correct relation between $E_{2}$ and $E_{1}$ and integrate over $E_{1}$ in addition to $z_{1}$ [@ElorRoddSlatyer2015]. The trick is to first use: $$\\begin{aligned} N_{f} = \\int\\dd{z_{1}}\\dd{E_{1}}\\pdv{N_{f}}{E_{1}}{z_{1}}\\end{aligned}$$ and insert: $$\\begin{aligned} 1 \u0026amp; = \\int\\dd{E_{2}}\\delta(E_{2} - E_{2}(E_{1}, z_{1}))\\end{aligned}$$ where $E_{2}(E_{1},z_{1}) = \\gamma E_{1} + \\beta\\gamma\\abs{\\bm{p}{1}}z{1}$ Inserting this factor of unity, we obtain: $$\\begin{aligned} N_{f} = \\int\\dd{E_{2}}\\int\\dd{z_{1}}\\int\\dd{E_{1}}\\pdv{N_{f}}{E_{1}}{z_{1}} \\delta(E_{2} - E_{2}(E_{1}, z_{1}))\\end{aligned}$$ Differentiating with respect to $E_{2}$, we find: $$\\begin{aligned} \\dv{N_{f}}{E_{2}} = \\int\\dd{z_{1}}\\int\\dd{E_{1}}\\pdv{N_{f}}{E_{1}}{z_{1}} \\delta(E_{2} - E_{2}(E_{1}, z_{1}))\\end{aligned}$$ The second method is to use one of the following (which is equivalent; see Ref. ([@kim2020derivation])) $$\\begin{aligned} \\dd[2]{N} = \\pdv{N_{f}}{E_{1}}{z_{1}}\\dd{E_{1}}\\dd{z_{1}} = \\pdv{N_{f}}{E_{1}}{z_{1}} \\mathcal{J} \\dd{E_{2}}\\dd{z_{2}} = \\pdv{N_{f}}{E_{1}}{z_{1}} \\tilde{\\mathcal{J}} \\dd{E_{2}}\\dd{z_{1}}\\end{aligned}$$ with the Jacobians, $\\mathcal{J}$ or $\\tilde{\\mathcal{J}}$, given by: $$\\begin{aligned} \\mathcal{J} \u0026amp; = \\mqty| \\pdv{E_{1}}{E_{2}} \u0026amp; \\pdv{E_{1}}{z_{2}} \\ \\pdv{z_{1}}{E_{2}} \u0026amp; \\pdv{z_{1}}{z_{2}} |, \u0026amp; \\tilde{\\mathcal{J}} \u0026amp; = \\mqty| \\pdv{E_{1}}{E_{2}} |\\end{aligned}$$ depending on if one wishes to convert $z_{1}$ into $z_{2}$ (since the angular varibles will ultimately be integrated over, either choice is fine.) We will focus on the $\\delta$-function approach since it is easiest to deal with.\nIn computing $\\dv*{N_{f}}{E_{2}}$, we need to perform one integration. But we have the choice of either integration over $E_{1}$ or $z_{1}$. The differences in the two will appear in the limits of integration. Suppose we integrate over $z_{1}$. Then, the $\\delta$-function can be casted to1 $$\\begin{aligned} \\delta(\\gamma E_{1} + \\beta\\gamma\\abs{\\bm{p}{1}}z{1} - E_{2}) \u0026amp; = \\frac{1}{\\gamma\\beta\\abs{\\bm{p}{1}}}\\delta(z{1} - z^{0}{1}), \u0026amp; z^{0}{1} \u0026amp; = \\frac{E_{2}-\\gamma E_{1}}{\\gamma\\beta\\abs{\\bm{p}{1}}}\\end{aligned}$$ Since $-1 \u0026lt; z{1} \u0026lt; 1$, the $\\delta$-function only has support if $$\\begin{aligned} -1 \u0026lt; \\frac{E_{2}-\\gamma E_{1}}{\\gamma\\beta\\abs{\\bm{p}{1}}} \u0026lt; 1\\end{aligned}$$ or $$\\begin{aligned} \\gamma\\qty(E{2}-\\beta\\sqrt{E_{2}^{2}-m_{f}^{2}}) \u0026lt; E_{1} \u0026lt; \\gamma\\qty(E_{2}+\\beta\\sqrt{E_{2}^{2}-m_{f}^{2}})\\end{aligned}$$ Defining $E^{\\pm}{1} = \\gamma\\qty(E{2}\\pm\\beta\\abs{\\bm{p}{2}})$ with $\\abs{\\bm{p}{2}} = \\sqrt{E_{2}^{2}-m_{f}^{2}}$, we find: $$\\begin{aligned} \\label{eqn:boost_e} \\dv{N_{f}}{E_{2}} = \\frac{1}{2\\gamma\\beta}\\int^{E^{+}{1}}{E^{-}{1}} \\frac{\\dd{E{1}}}{\\abs{\\bm{p}{1}}} \\dv{N{f}}{E_{1}} = \\frac{1}{2\\gamma\\beta}\\int^{E^{+}{1}}{E^{-}{1}} \\frac{\\dd{E{1}}}{\\sqrt{E_{1}^{2}-m^2_{f}}} \\dv{N_{f}}{E_{1}}\\end{aligned}$$ Note that the bounds may be different that $E^{\\pm}{1}$, depending on $E{2}$. The function $\\dv*{dN_{f}}{E_{1}}$ itself has limits $E^{\\mathrm{min}}{1}$ and $E^{\\mathrm{max}}{1}$. Thus, the actual limits of integration are: $$\\begin{aligned} \\mathrm{max}(E^{\\mathrm{min}}{1}, E^{-}{1}) \\leq E_{1} \\leq \\mathrm{min}(E^{\\mathrm{max}}{1}, E^{+}{1})\\end{aligned}$$\n-3.5ex -1.3ex -.7ex …","date":1646524800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646524800,"objectID":"fbaa24a4cc81a2512c1a0c2550b10130","permalink":"https://loganamorrison.github.io/post/boosting/","publishdate":"2022-03-06T00:00:00Z","relpermalink":"/post/boosting/","section":"post","summary":"This post demonstrates how to boost energies distributions from one frame to another","tags":["quantum-field-theory","finite-temperature-field-theory"],"title":"Boosting your spectra","type":"post"},{"authors":["Adam Coogan","Logan Morrison","Stefano Profumo"],"categories":[],"content":"","date":1627776000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646464828,"objectID":"2e5aac91837ad8e4bde48f534b233c47","permalink":"https://loganamorrison.github.io/publication/matching-2021/","publishdate":"2022-03-05T07:20:28.134743Z","relpermalink":"/publication/matching-2021/","section":"publication","summary":"","tags":[],"title":"Precision gamma-ray constraints for sub-GeV dark matter models","type":"publication"},{"authors":["Logan A. Morrison","Hiren H. Patel","Jaryd F. Ulbricht"],"categories":[],"content":"","date":1625097600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646464828,"objectID":"fcab29ef7611414fde2b03b925d6ec50","permalink":"https://loganamorrison.github.io/publication/asymptotic-boltzman-2021/","publishdate":"2022-03-05T07:20:28.647884Z","relpermalink":"/publication/asymptotic-boltzman-2021/","section":"publication","summary":"","tags":[],"title":"Asymptotic analysis of the Boltzmann equation for dark matter relic abundance","type":"publication"},{"authors":["Adam Duran","Logan Morrison","Stefano Profumo"],"categories":[],"content":"","date":1625097600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646464828,"objectID":"b921a4ef1abc87a805b4c7cf6c4ff14c","permalink":"https://loganamorrison.github.io/publication/cpt-rhn-2021/","publishdate":"2022-03-05T07:20:28.246255Z","relpermalink":"/publication/cpt-rhn-2021/","section":"publication","summary":"","tags":[],"title":"Sterile neutrino dark matter from generalized  CPT -symmetric early-Universe cosmologies","type":"publication"},{"authors":["Logan Morrison","Stefano Profumo","Dean J. Robinson"],"categories":[],"content":"","date":1619827200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646464828,"objectID":"d5a4cbf894be3426091d1337a64940fe","permalink":"https://loganamorrison.github.io/publication/large-nightmare-2021/","publishdate":"2022-03-05T07:20:28.543801Z","relpermalink":"/publication/large-nightmare-2021/","section":"publication","summary":"","tags":[],"title":"Large N-ightmare dark matter","type":"publication"},{"authors":["Adam Coogan","Logan Morrison","Stefano Profumo"],"categories":[],"content":"","date":1617235200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646464828,"objectID":"e5f4e7f2a734f76d34d3f33db75aee1a","permalink":"https://loganamorrison.github.io/publication/hawking-rad-2021/","publishdate":"2022-03-05T07:20:28.4478Z","relpermalink":"/publication/hawking-rad-2021/","section":"publication","summary":"","tags":[],"title":"Direct Detection of Hawking Radiation from Asteroid-Mass Primordial Black Holes","type":"publication"},{"authors":["Adam Coogan","Alexander Moiseev","Logan Morrison","Stefano Profumo"],"categories":[],"content":"","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646464828,"objectID":"6135c8233b74fcf2126a471644c6c2b4","permalink":"https://loganamorrison.github.io/publication/gecco-2021/","publishdate":"2022-03-05T07:20:28.347416Z","relpermalink":"/publication/gecco-2021/","section":"publication","summary":"","tags":[],"title":"Hunting for Dark Matter and New Physics with (a) GECCO","type":"publication"},{"authors":["P.M. Ferreira","L.A. Morrison","S. Profumo"],"categories":[],"content":"","date":1585699200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646464828,"objectID":"9c06eb2b6e328cd0402795fbf1a09322","permalink":"https://loganamorrison.github.io/publication/one-loop-thdm-2020/","publishdate":"2022-03-05T07:20:28.747996Z","relpermalink":"/publication/one-loop-thdm-2020/","section":"publication","summary":"","tags":[],"title":"One-loop charge-breaking minima in the two-Higgs doublet model","type":"publication"},{"authors":["Adam Coogan","Logan Morrison","Stefano Profumo"],"categories":[],"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646464828,"objectID":"bccd892bed58987823a265b8b734b8e7","permalink":"https://loganamorrison.github.io/publication/hazma-2020/","publishdate":"2022-03-05T07:20:28.84208Z","relpermalink":"/publication/hazma-2020/","section":"publication","summary":"","tags":[],"title":"Hazma: a python toolkit for studying indirect detection of sub-GeV dark matter","type":"publication"},{"authors":["Logan A. Morrison"],"categories":["Teaching"],"content":"   Its fall again and I’m TAing PHYS 116C (for the third time). The first topic of PHYS 116C is Fourier series. So, naturally, I thought I’d make a post about Fourier series. At some point, I stumbled acrossed this video by The Coding Train. In this post, I’d like to replicate what the The Coding Train did, but in more generality, i.e. for a general Fourier series. I will focus on periodic functions on the interval $(-\\pi, \\pi)$ for simplicity (one can easily modify what I write to accomidate more general intervals). I will also be using Julia, but the code can be easily adapted to any language (but at some put you’ll need a plotting library, so I’d say Julia, python or Mathematica is the way to go.)\nFourier Series The concept of Fourier series is incredibly useful for many fields in science, ranging from math, to physics, to engineering. As a physicist, I use Fourier series almost every day (mostly in infinite period limit, i.e. the Fourier transform, but thats a topic for a later day.) The goal of a Fourier series is to decompose a periodic function into a countably infinite number of sines and cosines with varying frequencies. This can be done for any piecewise continuous function over the real or complex numbers. Given some piecewise continuous function, $f(t)$, over the real numbers, which is periodic over the interval $(-\\pi,\\pi)$, we can write down its Fourier series as: $$ \\begin{align} f(t) \u0026amp;= \\dfrac{a_{0}}{2} + \\sum_{n=1}^{\\infty}a_{n}\\cos(nt) + \\sum_{n=1}^{\\infty}b_{n}\\sin(nt) \\end{align} $$ where $a_{0}, a_{n}$ and $b_{n}$ are the Fourier coefficients. It is straight forward to compute these coefficients using a technique known as Fourier’s trick. The idea is to realize that sine and cosines with different frequencies are orthogonal over the interval $(-\\pi,\\pi)$ (i.e. if you integrate the product of a sine and/or cosine of different frequencies of ($-\\pi,\\pi$) you get zero). For example, $$ \\dfrac{1}{\\pi}\\int_{-\\pi}^{\\pi}\\cos(nt)\\cos(mt) = \\begin{cases} 0 \u0026amp; n\\neq m\\\\ 1 \u0026amp; n=m \\end{cases} $$ Similar identities hold for other combinations of sines and cosines. If we use this orthogonality of sines and cosines, we can integrate both sides of the definition of the Fourier series to isolate the $a_{n}$’s and $b_{n}$’s. The results are: $$\\begin{align} a_{n} \u0026amp;= \\dfrac{1}{\\pi}\\int_{-\\pi}^{\\pi}f(t)\\cos(nt)dt, \u0026amp; b_{n} \u0026amp;= \\dfrac{1}{\\pi}\\int_{-\\pi}^{\\pi}f(t)\\sin(nt)dt \\end{align}$$ Given these simple formulas, we can then easily compute Fourier series of any function we might like. Before doing so, I’d like to present an alternate form of the real Fourier series consisting of just cosines (which will be useful for us later on). To get rid of the sines, one can make use of the following identity: $$\\begin{align} c_{n}\\cos(nt + \\phi_{n}) \u0026amp;= a_{n}\\cos(nt) + b_{n}\\sin(nt)\\\\ c_{n} \u0026amp;= \\sqrt{a_{n}^2 + b_{n}^2}\\\\ \\phi_{n} \u0026amp;= -\\tan^{-1}(b_{n}/a_{n}) \\end{align}$$ (this is easiest to prove using complex exponentials.) Then, we can write down the Fourier series as: $$\\begin{align} f(t) \u0026amp;= \\sum_{n=0}^{\\infty}c_{n}\\cos(nt + \\phi_{n}) \\end{align}$$ with $c_{0} = a_{0} / 2$ and $\\phi_{0} = 0$.\nBefore moving onto the main topic, let’s write some code to compute Fourier series. I will be using Julia (since its the best), but the reader can easily adapt the code to their favorite programing language.\nFirst, let’s create a Julia struct for representing the Fourier series of a function:\nstruct FourierSeries a0::Float64 ans::Array{Float64, 1} bns::Array{Float64, 1} end  Let’s also create a constructor that will take in a function and return a filled FourierSeries object. To do this, we will need to compute some integrals. We will use the QuadGK library to do this (you can install via Pkg.add(\u0026#34;QuadGK\u0026#34;)):\nusing QuadGK \u0026#34;\u0026#34;\u0026#34; FourierSeries(f; N=10) Generate a FourierSeries object containing the the first `N` (excluding a0) Fourier coefficients of the function `f` over the interval (-π, π). \u0026#34;\u0026#34;\u0026#34; function FourierSeries(f::Function; N::Int=10) a0::Float64 = quadgk(t-\u0026gt; f(t), -π, π)[1] / π ans = Array{Float64, 1}(undef, N) bns = Array{Float64, 1}(undef, N) for n in 1:N ans[n] = quadgk(t-\u0026gt; f(t) * cos(n * t), -π, π)[1] / π bns[n] = quadgk(t-\u0026gt; f(t) * sin(n * t), -π, π)[1] / π end FourierSeries(f, a0, ans, bns) end  Calling FourierSeries(f) will return a FourierSeries object with the first 10 Fourier coefficients computed. Likewise, FourierSeries(f; N=100) would compute the first 100 Fourier coefficients. We will also what to be able to evaluate the Fourier series at a given time. Thus, to avoid explicitly writing the sum everytime, let’s write a function to do this:\n\u0026#34;\u0026#34;\u0026#34; eval(t, fs::FourierSeries) Evaluate the Fourier series `fs` at the time `t`. \u0026#34;\u0026#34;\u0026#34; function eval(t::Float64, fs::FourierSeries) fs.a0 / 2 + sum(fs.ans[n] * cos(n * t) + fs.bns[n] * sin(n * t) for n in 1:length(fs.ans)) end  For convinience, we also make a vectorized function:\nfunction eval(ts::AbstractRange, fs::FourierSeries) [eval(t, fs) for t in ts] end  which can take in a …","date":1570060800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570060800,"objectID":"063195a1585c41bf4b38ec65c00f0b1f","permalink":"https://loganamorrison.github.io/post/visualizing-fourier-series/","publishdate":"2019-10-03T00:00:00Z","relpermalink":"/post/visualizing-fourier-series/","section":"post","summary":"A tutorial on Fourier series with intuative illustrations using epicycles.","tags":["Teaching"],"title":"Visualizing Fourier Series","type":"post"},{"authors":["Logan A. Morrison"],"categories":["Field Theory"],"content":"Introduction In this post, we will discuss how to compute fluctuation determinants is a finite temperature field theory. The general form of an operator that we will investigate is:\n$$ \\begin{align} \\mathcal{O} \u0026amp;= -\\nabla^2 + \\omega_{n}^2 + m^2 + V(x) \\end{align} $$\nwhere $m$ is a zero-temperature mass, $\\omega_{n} = 2\\pi n T$ for bosons and $2\\pi(n+1/2)T$ for fermions and $V(x)$ is some space-dependent function. Often, $V(x)$ will take the form of a background- or low-mass-field-dependent mass for the fluctuation fields of the problem. For example, consider a $\\phi^4$ theory at finite temperature with the following action:\n$$ \\begin{align} S[\\phi] \u0026amp;= \\int_{0}^{\\beta}d\\tau\\int d^{3}x \\dfrac{1}{2}(\\partial_{\\mu}\\phi)^2 -\\dfrac{1}{2}m^2\\phi^2 +\\dfrac{\\lambda}{8}\\phi^4 \\end{align} $$\nwhere $\\phi = \\phi(\\tau, x)$. If one expands the field $\\phi$ as a Fourier series in the imaginary time coordinate $\\tau$,\n$$ \\begin{align} \\phi(\\tau, x) \u0026amp;= \\sum_{n=-\\infty}^{\\infty}\\phi_{n}e^{i\\omega_{n}\\tau} \\end{align} $$\nand wishes to integrate over the heavy Matsubara modes ($n\\neq0$ modes), then they will need to compute a thermal fluctuation determinant of an operator of the form:\n$$ \\begin{align} \\mathcal{O} \u0026amp;= -\\nabla^2 + \\omega_{n}^2 + m^2 + \\dfrac{3}{2}\\lambda\\phi_{0}^2 \\end{align} $$\nWhere $\\phi_{0}$ is the zero-mode ($n=0$ Matsubara mode.) In this case, $V(x) = (3\\lambda/2)\\phi_{0}^2(x)$. The question we would like to answer is: how does one evaluate the following fluctuation determinant\n$$ \\begin{align} \\mathrm{tr}\\log\\left(-\\nabla^2 + \\omega_{n}^2 + m^2 + V(x)\\right) \\end{align} $$\nWe will answer this question in the limit as $T\\to\\infty$.\nHeat Kernal Expansion The method we will employ to evaluate the fluctuation determinant of the operator $\\mathcal{O} = -\\nabla^2 + \\omega_{n}^2 + m^2 + V(x)$ is the so called heat-kernel expansion. The idea is to use the following identity:\n$$ \\begin{align} \\log(\\lambda) = -\\int_{0}^{\\infty}\\dfrac{ds}{s}e^{-\\lambda s} + \\mathrm{constant} \\end{align} $$\nwhere the constant we left implicit is some infinite constant which will play no role in our analysis. To derive this expression, one can consider the following:\n$$ \\begin{align} \\int_{0}^{\\infty}\\dfrac{ds}{s}e^{-\\lambda s} \u0026amp;= \\int_{0}^{\\infty}ds\\int_{\\lambda}^{\\infty}d\\lambda’e^{-\\lambda’ s} \\end{align} $$\nSwitching the order of integration and integrating over $s$, we find:\n$$ \\begin{align} \\int_{0}^{\\infty}\\dfrac{ds}{s}e^{-\\lambda s} \u0026amp;= \\int_{\\lambda}^{\\infty}d\\lambda’\\dfrac{1}{\\lambda’} = \\lim_{\\lambda’\\to\\infty}\\log(\\lambda’) - \\log(\\lambda) \\end{align} $$\nThus, up to an infinite constant, the identity holds. Note that if we take the trace of a log of a determinant, we are equivalently summing over the log of the eigenvalues of the operator. Therefore, we can say that:\n$$ \\begin{align} \\mathrm{tr}\\log(\\mathcal{O}) = \\sum_{\\lambda}\\log(\\lambda) = -\\int_{0}^{\\infty}\\dfrac{ds}{s}\\sum_{\\lambda}e^{-\\lambda s} = \\int_{0}^{\\infty}\\dfrac{ds}{s}\\mathrm{tr}e^{-\\mathcal{O} s} \\end{align} $$\nWe will define the factor of $e^{-\\mathcal{O}s}$ as the heat kernel:\n$$\\begin{align} K(s, x, y) \\equiv \\langle x|e^{-\\mathcal{O}_{x} s}|y\\rangle \\end{align}$$\nwhere the subscript $x$ denotes that the derivatives and function evaluation of $\\mathcal{O}$ to be evaluated with $x$. Then, the trace of $e^{-\\mathcal{O} s}$ is just the integral over $x$ of $K(s,x,x)$:\n$$\\begin{align} \\mathrm{tr}e^{-\\mathcal{O} s} = \\int d^{d}x K(s,x,x) \\end{align}$$\nThe heat-kernel turns out to satisfy the heat equation (hence the name). This is easy to see:\n$$ \\begin{align} \\dfrac{\\partial}{\\partial s}e^{-\\mathcal{O}_{x} s} = -{\\mathcal{O}_{x}} K(s,x,y) \\quad \\implies \\quad \\left(\\dfrac{\\partial}{\\partial s} + {\\mathcal{O}_{x}}\\right)K(s,x,y) = 0 \\end{align} $$\nThe right-most equality is simply the heat equation with a source term of $\\omega_{n}^2 + m^2 + V(x)$. The boundary condition of the heat equation can be found by setting $s=0$:\n$$ \\begin{align} K(s=0,x,y) = \\langle x|y\\rangle = \\delta^d(x-y) \\end{align} $$\nThe heat-kernel can be determined exactly if we set $V(x) = 0$. Let’s call:\n$$ \\begin{align} \\mathcal{M}^2 = \\omega_{n}^2 + m^2 \\end{align} $$\nfor ease of notation. The heat-kernel for the operator:\n$$ \\begin{align} \\mathcal{O}_{0} = -\\nabla^2 + \\mathcal{M}^2 \\end{align} $$\nis given by the following:\n$$ \\begin{align} K_{0}(s,x,y) = \\dfrac{1}{(4\\pi s)^{d/2}}\\exp\\left(-\\dfrac{|x-y|^2}{4s}-s\\mathcal{M}^2\\right) \\end{align} $$\nThis can be verified by differentiation. Additionally, one can check that this expression satisfies the boundary condition (to do this, integrate some function $f(x)$ by Taylor expanding the function. The results are a set of gaussian integrals which can easily be evaluate to obtain $f(y)$.) Further more, $K_{0}(s, x, x)$ is:\n$$ \\begin{align} K_{0}(s,x,x) = \\dfrac{1}{(4\\pi s)^{d/2}}e^{-s\\mathcal{M}^2} \\end{align} $$\nWe can use this result to find the general result. Recall the Zassenhaus formula (a special case of the Baker-Campbell-Hausdorff …","date":1567382400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567382400,"objectID":"2bb0d6df20264afc340a7115036fcf17","permalink":"https://loganamorrison.github.io/post/functional-det-heat-kernel/","publishdate":"2019-09-02T00:00:00Z","relpermalink":"/post/functional-det-heat-kernel/","section":"post","summary":"In this post, we demonstrate how to evaluate functional determinants of fermionic and bosonic operators using the heat kernel expansion","tags":["quantum-field-theory","finite-temperature-field-theory"],"title":"Evaluating Functional Determinants in a Thermal Field Theory using the Heat-Kernel","type":"post"},{"authors":["Logan A. Morrison"],"categories":["Field Theory"],"content":"Generic Form To derive the effective potential, we start with a couple definitions. We define the generating function for greens functions as: $$\\begin{align} Z[J] = \\int\\mathcal{D}\\phi\\exp(iS[\\phi] + \\int d^{4}x J(x)\\phi(x)) \\end{align}$$ This functional generates all possible Feynman diagrams. Not all of these diagrams will be connected. To generate the connected diagrams, we introduce the generating functional for connected diagrams: $$\\begin{align} W[J] = -i\\ln(Z[J]) \\end{align}$$ Even the connected diagrams are not the most fundamental. The most fundamental are the one-particle irreducible (1PI) diagrams. These are generated by a functional which is the Legandre transform of $W[J]$: $$\\begin{align} \\Gamma[\\phi_{\\text{cl}}] = W[J] - \\int d^{4}x J(x)\\phi_{\\text{cl}}(x) \\end{align}$$ where $$\\begin{align} \\phi_{\\text{cl}}(x) = \\dfrac{\\delta W[J]}{\\delta \\phi(x)} \\end{align}$$ The effective potential will be given by $$\\begin{align} \\Gamma[\\phi_{\\text{cl}}] = -(VT)V_{\\text{eff}}(\\phi_{\\text{cl}}) \\end{align}$$ where $VT$ is the volume of space-time. Let’s illustrate how to compute the effective action using the background field method. We begin by expanding $\\phi$ about the classical field, taking $\\phi_{\\text{cl}}$ to be independent of space-time. That is,\n$$ \\begin{align} \\phi(x) = \\phi_{\\text{cl}} + \\eta(x) \\end{align} $$\nwhere $\\eta(x)$ is a field representing the high momentum degrees of freedom of $\\phi(x)$. We now expand the action about $\\phi_{\\text{cl}}$:\n$$ \\begin{align} S[\\phi(x)] \u0026amp; = S[\\phi_{\\text{cl}}] + \\sum_{n=1}\\dfrac{1}{n!}\\int d^{4}x_{1} \\cdots\\int d^{4}x_{n}\\dfrac{\\delta^{n}S[\\phi(x)]}{\\delta\\phi(x_{1}) \\cdots\\delta\\phi(x_{n})}\\\\ \u0026amp; = S[\\phi_{\\text{cl}}] + \\int d^{4}y \\dfrac{\\delta S[\\phi(x)]}{\\delta\\phi(y)}\\eta(y) + \\dfrac{1}{2}\\int d^{4}y \\int d^{4}z \\dfrac{\\delta^{2}S}{\\delta\\phi(y)\\delta\\phi(z)}\\eta(y)\\eta(z) + \\cdots \\end{align} $$\nThus,\n$$ \\begin{align} S[\\phi] + \\int d^{4}y J(y)(\\phi(y) +\\phi_{\\text{cl}}) \u0026amp; = S[\\phi_{\\text{cl}}] + \\int d^{4}y J(y)\\phi_{\\text{cl}} + \\int d^{4}y \\eta(y)\\left(\\dfrac{\\delta S[\\phi]}{\\delta\\phi(y)} + J(y)\\right)\\\\ \u0026amp; \\qquad + \\int d^{4}y\\int d^{4}z \\eta(y)\\dfrac{\\delta^{2} S[\\phi]}{\\delta\\phi(y)\\delta\\phi(z)}\\eta(z) + \\cdots\\notag \\end{align} $$\nwhere all the functional derivatives are evaluated at $\\phi_{\\text{cl}}$. Note that the equations of motion, which $\\phi_{\\text{cl}}$ satisfies, are\n$$ \\begin{align} \\dfrac{\\delta S[\\phi]}{\\delta\\phi(y)}\\bigg{|}{\\phi=\\phi{\\text{cl}}} + J(y) = 0 \\end{align}$$\nTherefore, the term linear term in $\\eta$ of the expansion of the action is zero. Now, the functional $Z[J]$ to quadratic order in $\\eta$ is:\n$$ \\begin{align} Z[J] \u0026amp; = \\int\\mathcal{D}\\phi\\exp(iS[\\phi] + i\\int d^{4}y J(y)\\phi(y))\\notag\\\\ \u0026amp; = \\exp\\left(iS[\\phi_{\\text{cl}}] + i\\int d^{4}y J(y)\\phi_{\\text{cl}})\\right)\\int\\mathcal{D}\\eta\\exp\\left(\\dfrac{i}{2}\\int d^{4}y\\int d^{4}z \\eta(y)\\dfrac{\\delta^{2} S[\\phi]}{\\delta\\phi(y)\\delta\\phi(z)}\\eta(z) +\\cdots\\right) \\end{align} $$\nWe can explicitly evaluate the functional integral by wick rotating: $t\\to i\\tau$. Then, $$\\begin{align} \\int\\mathcal{D}\\eta\\exp\\left(-\\dfrac{1}{2}\\int d^{4}y_{E}\\int d^{4}z_{E} \\eta(y)\\dfrac{\\delta^{2} S_{E}[\\phi]}{\\delta\\phi(y)\\delta\\phi(z)}\\eta(z)\\right) \\propto \\left(\\det \\dfrac{\\delta^{2} S[\\phi]}{\\delta\\phi(y)\\delta\\phi(z)}\\right)^{-1/2} \\end{align} $$\nNow, using\n$$ \\begin{align} \\left(\\det \\dfrac{\\delta^{2} S[\\phi]}{\\delta\\phi(y)\\delta\\phi(z)}\\right)^{-1/2} = \\exp\\left(-\\dfrac{1}{2}\\ln\\det \\dfrac{\\delta^{2} S[\\phi]}{\\delta\\phi(y)\\delta\\phi(z)}\\right) \\end{align} $$\nAnd thus,\n$$ \\begin{align} Z[J] = \\exp\\left(iS[\\phi_{\\text{cl}}] + i\\int d^{4}y J(y)\\phi_{\\text{cl}} -\\dfrac{1}{2}\\ln\\det \\dfrac{\\delta^{2} S[\\phi]}{\\delta\\phi(y)\\delta\\phi(z)}\\right) = e^{iW[J]} \\end{align} $$\nTherefore,\n$$ \\begin{align} W[J] = S[\\phi_{\\text{cl}}] + \\int d^{4}y J(y)\\phi_{\\text{cl}} + \\dfrac{i}{2}\\ln\\det \\dfrac{\\delta^{2} S[\\phi]}{\\delta\\phi(y)\\delta\\phi(z)} \\end{align} $$\nNow, the effective action is given by\n$$ \\begin{align}\\label{effective_potential} \\Gamma[\\phi_{\\text{cl}}] \u0026amp; = W[J] - \\int d^{4}y J(y)\\phi_{\\text{cl}}\\ \u0026amp; =S[\\phi_{\\text{cl}}] + \\int d^{4}y J(y)\\phi_{\\text{cl}} + \\dfrac{i}{2}\\ln\\det \\dfrac{\\delta^{2} S[\\phi]}{\\delta\\phi(y)\\delta\\phi(z)}- \\int d^{4}y J(y)\\phi_{\\text{cl}} \\notag\\ \u0026amp; =S[\\phi_{\\text{cl}}] + \\dfrac{i}{2}\\ln\\det \\dfrac{\\delta^{2} S[\\phi]}{\\delta\\phi(y)\\delta\\phi(z)}\\notag \\end{align} $$\nSpecific Example: Linear Sigma Model Effective Potential in the Linear Sigma Model Let’s examine this process of computing the effective action for a simple example. Consider the linear sigma model:\n$$ \\begin{align} \\mathcal{L} = \\dfrac{1}{2}\\left(\\partial_{\\mu}\\vec{\\Phi}\\right)\\cdot\\left(\\partial^{\\mu}\\vec{\\Phi}\\right) + \\dfrac{1}{2}\\mu^{2}\\left(\\vec{\\Phi}\\cdot\\vec{\\Phi}\\right) - \\dfrac{\\lambda}{4}\\left(\\vec{\\Phi}\\cdot\\vec{\\Phi}\\right)^{2} \\end{align} $$\nwhere $\\vec{\\Phi}$ is a vector containing $N$ scalar fields. We now expand these fields about the classical fields:\n$$ \\begin{align} \\vec{\\Phi} …","date":1566777600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1566777600,"objectID":"9665492b8496c3587d5e5c5a410689af","permalink":"https://loganamorrison.github.io/post/effective-potential-scalar-ft/","publishdate":"2019-08-26T00:00:00Z","relpermalink":"/post/effective-potential-scalar-ft/","section":"post","summary":"A presentation of computing the effective potenial and an example of the full calculation in an SO(N) scalar field theory.","tags":["quantum-field-theory","effective-potential"],"title":"Effective Potential in a Scalar Field Theory","type":"post"},{"authors":["Logan A. Morrison"],"categories":["Field Theory","Dark Matter"],"content":"Introduction In this notebook, we will investigate how to solve the Boltzmann equation in order to determine the relic abundance of a species. Our focus will be on a species which represents a dark matter (DM) particle. We will assume that the dark matter interacts with the standard model (SM) through a massive mediator with interactions that look like $\\bar{\\chi}\\chi\\to \\mathrm{SM}_{1} + \\mathrm{SM}_{2}$, i.e. through a $2\\to2$ interaction. For these types of interactions, the Boltzmann equation takes the form of: $$\\begin{align} \\dfrac{dn}{dt} + 3Hn = -\\langle\\sigma v\\rangle(n^2 - n_{\\mathrm{eq}}^2) \\end{align}$$ where $n$ is the DM number density, $n_{\\mathrm{eq}}$ is the DM equilibrium number density, $H$ is the hubble constant and $\\langle\\sigma v\\rangle$ is the annihilation cross section for DM into SM particles. As is, this equation is in poor form. We will make several changes to bring it into a more suitible form for numerically solving.\nOur first change will be to define the so called comoving number density, $Y$. This will be defined as: $$\\begin{align} Y = \\dfrac{n}{s} \\end{align}$$ where $s$ is the SM entropy density. Note that the total SM entropy is conserved, i.e. $a^3s = \\mathrm{constant}$ with $a$ being the scale factor of the universe. This implies that: $$\\begin{align} \\dfrac{d}{dt}a^3s = 3\\dfrac{da}{dt}a^2s + a^3\\dfrac{ds}{dt} = 0 \\end{align}$$ If we rearange this equation and recall that $d\\log(a)/dt = H$, we find that: $$\\begin{align} \\dfrac{ds}{dt} = -3\\dfrac{1}{a}\\dfrac{da}{dt}s = -3Hs \\end{align}$$ This relation will allow us to determine $dY/dt$: $$\\begin{align} \\dfrac{1}{s}\\dfrac{dn}{dt} \u0026amp;= \\dfrac{dY}{dt} - 3HY \\end{align}$$ Therefore, the Boltzmann equation for $Y$ is: $$\\begin{align} \\dfrac{dY}{dt} = -s\\langle\\sigma v\\rangle(Y^2 - Y_{\\mathrm{eq}}^2) \\end{align}$$ where we defined $Y_{\\mathrm{eq}} = n_{\\mathrm{eq}}/s$. Next, we will change independent variables from time to temperature. To do this, we again us $\\dot{s}/s = -3H$. Using the explict form $s=2\\pi^2/45 hT^3$ ($h$ being the number of d.o.f. in entropy), one finds that: $$\\begin{align} -3H = \\dfrac{1}{s}\\dfrac{ds}{dt} = \\dfrac{3}{T}\\left(1 + \\dfrac{T}{3h}\\dfrac{dh}{dT}\\right) \\dfrac{dT}{dt} \\end{align}$$ Therefore, $$\\begin{align} \\dfrac{dt}{dT} =-\\dfrac{1}{HT}\\left(1 + \\dfrac{T}{3h}\\dfrac{dh}{dT}\\right) \\end{align}$$ We can use this relationship to determine $dY/dT$: $$\\begin{align} \\dfrac{dY}{dT} = \\dfrac{dt}{dT}\\dfrac{dY}{dt} = \\dfrac{s}{HT}\\left(1 + \\dfrac{T}{3h}\\dfrac{dh}{dT}\\right) \\langle\\sigma v\\rangle(Y^2 - Y_{\\mathrm{eq}}^2) \\end{align}$$ Another change people usually make is again changing the indepednent variable from $T\\to x = m/T$ where $m$ is the mass of the DM particle. If we make this change, we find that: $$\\begin{align} \\dfrac{dY}{dx} =- \\dfrac{s}{Hx}\\left(1 + \\dfrac{T}{3h}\\dfrac{dh}{dT}\\right) \\langle\\sigma v\\rangle(Y^2 - Y_{\\mathrm{eq}}^2) \\end{align}$$ We can expand out the definitions of $s$ and $H=\\sqrt{8\\pi\\rho/3}/M_{\\mathrm{pl}}$ $$\\begin{align} H = \\sqrt{\\dfrac{8\\pi G}{3}\\rho} = \\sqrt{\\dfrac{8\\pi^3}{90}}\\sqrt{g}\\dfrac{T^2}{M_{\\mathrm{pl}}} \\end{align}$$ to obtain: $$\\begin{align} \\boxed{\\dfrac{dY}{dx} =- \\sqrt{\\dfrac{\\pi}{45}}\\dfrac{m M_{\\mathrm{pl}}}{x^2}g^{1/2}_{\\star} \\langle\\sigma v\\rangle(Y^2 - Y_{\\mathrm{eq}}^2)} \\end{align}$$ where we defined: $$\\begin{align} g^{1/2}_{\\star} \\equiv \\left(1 + \\dfrac{T}{3h}\\dfrac{dh}{dT}\\right) \\dfrac{h}{\\sqrt{g}} \\end{align}$$ This is typically how people quote the Boltzmann equation. However, one final set of modifications needs to be made for numerical purposes. $Y$ can vary over many orders of magnitude. Thus, it is very useful to define $W\\equiv\\log(Y)$. Then, $W$ only undergoes order $1$ changes. Additionally, it is useful to work with the $\\log(x)$ instead of $x$. Making these changes we find that: $$\\begin{align} \\boxed{\\dfrac{dW}{d\\log(x)} =- \\sqrt{\\dfrac{\\pi}{45}}\\dfrac{m M_{\\mathrm{pl}}}{x}g^{1/2}_{\\star} \\langle\\sigma v\\rangle(e^{W} - e^{2W_{\\mathrm{eq}}-W})} \\end{align}$$ In the next sections, we will solve this equation.\nSimple Model In many cases, the thermally averaged annihilation cross section can be brought into the form: $$\\begin{align} \\langle\\sigma v\\rangle = \\langle\\sigma v\\rangle_{0}x^{-n} + \\mathrm{O}(x^{-n-1}) \\end{align}$$ In this form, we can simplify the Boltzmann equation to: $$\\begin{align} \\dfrac{dW}{d\\log(x)} =- \\sqrt{\\dfrac{\\pi}{45}}\\dfrac{m M_{\\mathrm{pl}}}{x^{n+1}}g^{1/2}_{\\star} \\langle\\sigma v\\rangle_{0}(e^{W} - e^{2W_{\\mathrm{eq}}-W}) \\end{align}$$\nEvolution of $W = \\log(n/s)$ Now, let’s define a model:\nusing DarkSUN mutable struct DarkMatterModel χ::ThermodynamicFermion n::Int64 sm::StandardModel σ0::Float64 end \u0026#34;\u0026#34;\u0026#34; DarkMatterModel(m::Float64, n::Int64, σ0::Float64) Default constructor for DM model # Arguments - `m::Float64`: DM mass - `n::Int64`: interaction order - 0: s-wave, 1: p-wave and so on. - `σ0::Float64`: thermal cross section coefficient \u0026#34;\u0026#34;\u0026#34; function DarkMatterModel(m::Float64, n::Int64, σ0::Float64) χ = …","date":1566691200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1566691200,"objectID":"df2676fcfb73c54e19029d971d8ce8f5","permalink":"https://loganamorrison.github.io/post/solving-boltzman-equation/","publishdate":"2019-08-25T00:00:00Z","relpermalink":"/post/solving-boltzman-equation/","section":"post","summary":"A demonstration of solving the Boltzmann equation for Dark Matter comoving number density using `Julia`.","tags":["quantum-field-theory","cosmology","numerics"],"title":"Solving the Boltzmann Equation","type":"post"},{"authors":["Logan A. Morrison"],"categories":["Field Theory"],"content":"Introduction In this document, we will invesigate how to compute the temperature and evolution of temperature of a species which is decoupled from the standard model. For simplicity, we will consider a set of particles which are decoupled from the standard model but are coupled in their own sector. If a species or set of species is completely decoupled from the standard model, then there should be no entropy exchange between the standard model and the secluded sector. Let’s denote the secluded sector as the “dark” sector. Then, the entropy density of the dark sector, denoted by $s_{d}$, is conserved in totality, i.e., $\\frac{d}{dt}(a^3s_{d}) = 0$ ($a$ is the scale factor of the universe.) This implies that the ratio of entropy densities of the dark and standar model is a constant: $$\\begin{align} \\mathrm{constant} = \\dfrac{a^3s_{d}(T_{d})}{a^3s(T)} = \\dfrac{s_{d}(T_{d})}{s(T)} \\end{align}$$ where $s$ is the standard model entropy density, $T_{d}$ is the dark sector temperature and $T$ is the standard model temperature. Since this ratio is a constant, we can evaluate the ratio at different temperature and still have equality. i.e.: $$\\begin{align} \\dfrac{s_{d}(T_{d,1})}{s(T_1)} = \\dfrac{s_{d}(T_{d,2})}{s(T_2)} \\end{align}$$ Let’s parameterize the entropy densities in terms of their repsective relativistic degrees of freedom: $$\\begin{align} s_{d}(T_{d}) \u0026amp;= \\dfrac{2\\pi^2}{45}h_{d}(T_{d})T_{d}^3\\ s(T) \u0026amp;= \\dfrac{2\\pi^2}{45}h(T)T^3 \\end{align}$$ Then, the ratio of entropy densities becomes: $$\\begin{align} \\dfrac{s_{d}(T_{d})}{s(T)} = \\dfrac{h_{d}(T_{d})}{h(T)}\\left(\\dfrac{T_{d}}{T}\\right)^3 \\end{align}$$ We will define the ratio of dark to standard model temperatures as $\\xi\\equiv T_{d}/T$. Now, our conservation equation reads: $$\\begin{align} \\dfrac{h_{d}(T_{d,1})}{h(T_1)}\\xi_{1}^3 = \\dfrac{h_{d}(T_{d,2})}{h(T_2)}\\xi_{2}^3 \\end{align}$$ Suppose that in the very early universe, the ratio of temperatures is known. Let’s call it $\\xi_{\\infty} = T_{d,\\infty}/T_{\\infty}$. Then, at lower temperatures, the ratio will be given by: $$\\begin{align} \\xi^3 = \\dfrac{h(T)}{h_{d}(T_{d})}\\dfrac{h_{d}(T_{d,\\infty})}{h(T_{\\infty})}\\xi_{\\infty}^3 = \\dfrac{h(T)}{h_{d}(T_{d})} C_{\\infty} \\end{align}$$ where we defined $C_{\\infty} = \\xi_{\\infty}^3h_{d}(T_{d,\\infty})/h(T_{\\infty})$. Thus, the evolution of the dark sector temperature is governed by the evolution of its own d.o.f. and the standard model d.o.f. In principle, if the ratio at very large temperatures is known, then the ratio at lower temperatures can be computed numerically. In the next sections, we will figure out how to numerically determine the ratio at lower temperatures. We will do so for two cases: one case where all dark sector particles are massive and two where there is at least one massless species. The reason for the distinction can be seen from the above equation. For massive particles, the entropy density drops off exponentially once the temperature drops bellow its mass. Therefore, if all particles are massive, the dark temperature will increase exponentially compared to the standard model as long as the massive particles are in kinetic equilibrium. If there is at least one massless particle, the temperature never undergoes an exponetial increase.\nApproximate Form of D.O.F in Entropy Here we give results for the general form of $h_{d}(T_{d})$. It is: $$\\begin{align} h_{d}(T_{d}) = \\dfrac{45}{4\\pi^4}\\sum_{i}\\left(\\dfrac{T_{i}}{T_{d}}\\right)^3 g_{i}x_{i}^3\\sum_{m=1}^{\\infty}\\dfrac{(\\mp1)^{m+1}}{m}K_{3}(mx_{i}) \\end{align}$$ where the sum runs over all particles in the sector, $g_{i}$ is the number of internal d.o.f. in species $i$, $T_{i}$ is the temperature of species $i$, and $x_{i} = m_{i}/T_{i}$. Typically, it is sufficient to keep only the $m=1$ term in the series, yielding: $$\\begin{align} h_{d}(T_{d}) = \\dfrac{45}{4\\pi^4}\\sum_{i}\\left(\\dfrac{T_{i}}{T_{d}}\\right)^3 g_{i}x_{i}^3K_{3}(x_{i}) = \\dfrac{45}{4\\pi^4 T_{d}^3}\\sum_{i}g_{i}m_{i}^3K_{3}(m_{i}/T_{i}) \\end{align}$$ For a massless species, one finds that: $$\\begin{align} m_{i}^3K_{3}(m_{i}/T_{i}) \\to 8T_{i}^3 \\end{align}$$ Therefore, the general expression is: $$\\begin{align} h_{d}(T_{d}) = \\dfrac{90}{\\pi^4}\\sum_{m_{i}=0}g_{i} + \\dfrac{45}{4\\pi^4}\\sum_{m_{i}\\neq0}g_{i}x_{i}^3K_{3}(x_{i}) + \\cdots \\end{align}$$ where the $\\cdots$ represent terms that are decoupled.\nCase 1: All Massive Dark Sector Particles The equation that we wish to solve is the following: $$\\begin{align} \\xi^3h_{d}(\\xi T) = h(T)\\dfrac{h_{d}(T_{d,\\infty})}{h(T_{\\infty})}\\xi_{\\infty}^3 \\end{align}$$ where, in this expression, one should consider $T$ as being fixed and $\\xi$ being a function of $T$. Our goal will be to find upper and lower bounds on the LHS of this equation. Note that $$\\begin{align} \\dfrac{45}{4\\sqrt{2}\\pi^{7/2}}\\sum_{i}x_{i}^{5/2}e^{-x_{i}} \u0026lt; h_{d}(\\xi T) \u0026lt; \\sum_{i,b}g_{i} + \\dfrac{7}{8}\\sum_{i,f}g_{i} \\end{align}$$ where the sum over $b$ is for bosons and $f$ for fermions and $x_{i} = m_{i} / T_{d} = m_{i} / \\xi T$. …","date":1566691200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1566691200,"objectID":"a092cee7b92cf92664d5716e1dd8244b","permalink":"https://loganamorrison.github.io/post/temp-evolution-decoupled/","publishdate":"2019-08-25T00:00:00Z","relpermalink":"/post/temp-evolution-decoupled/","section":"post","summary":"In this post, we investigate the evolution of the temperature of a bath of particles which are thermally decoupled to the Standard Model.","tags":["quantum-field-theory","cosmology"],"title":"Temperature Evolution of a Decoupled Dark Sector","type":"post"},{"authors":["Logan A. Morrison"],"categories":["Field Theory"],"content":"Introduction In this notebook we wish to compute the thermal distribution functions for fermions and bosons. The functions we wish to compute are the equilibirium number, energy, pressure and entropy densities. In full form, these are given by: $$\\begin{align} n(T) \u0026amp;= g\\int\\dfrac{d^3k}{(2\\pi)^2}f(\\vec{k})\\\\ \\rho(T) \u0026amp;= g\\int\\dfrac{d^3k}{(2\\pi)^2}E(\\vec{k})f(\\vec{k})\\\\ P(T) \u0026amp;= g\\int\\dfrac{d^3k}{(2\\pi)^2}\\dfrac{|\\vec{k}|^2}{3E(\\vec{k})}f(\\vec{k}) \\end{align}$$ with $g$ representing the number of internal degrees of freedom (d.o.f), $E^2 = k^2 + m^2$ and $f(\\vec{k})$ is the phase-space distribution function. For a species in kinetic equilibirium, the phase space distribution is given by: $$\\begin{align} f(\\vec{k}) \u0026amp;= \\dfrac{1}{e^{E/T}\\pm1} \\end{align}$$ where one takes the $+$ for fermions and $-$ for bosons. Note that we have ignored the chemical potential in writing down $f$. Since $f(\\vec{k})$ is independent of angles, we can integrate of the solid angle and obtain: $$\\begin{align} n(T) \u0026amp;= \\dfrac{g}{2\\pi^2}\\int_{m}^{\\infty} dE \\dfrac{E\\sqrt{E^2-m^2}}{e^{E/T}\\pm1}\\\\ \\rho(T) \u0026amp;= \\dfrac{g}{2\\pi^2}\\int_{m}^{\\infty} dE \\dfrac{E^2\\sqrt{E^2-m^2}}{e^{E/T}\\pm1}\\\\ P(T) \u0026amp;= \\dfrac{g}{6\\pi^2}\\int_{m}^{\\infty} dE \\dfrac{(E^2-m^2)^{3/2}}{e^{E/T}\\pm1} \\end{align}$$ We can further simplify these functions by defining: $z = E / T$ and $x = m / T$. Doing so, we find\n$$\\begin{align} n(T) \u0026amp;= gT^3\\bar{n}_{\\pm}(x)\\\\ \\rho(T) \u0026amp;= gT^4\\bar{\\rho}_{\\pm}(x)\\\\ P(T) \u0026amp;= gT^4\\bar{P}_{\\pm}(x) \\end{align}$$\nwhere we defined the ‘barred’ quantities as:\n$$\\begin{align} \\bar{n}_{\\pm}(x) \u0026amp;= \\dfrac{1}{2\\pi^2}\\int_{x}^{\\infty} dz \\dfrac{z\\sqrt{z^2-x^2}}{e^{z}\\pm1}\\\\ \\bar{\\rho}_{\\pm}(x) \u0026amp;= \\dfrac{1}{2\\pi^2}\\int_{x}^{\\infty} dz \\dfrac{z^2\\sqrt{z^2-x^2}}{e^{z}\\pm1}\\\\ \\bar{P}_{\\pm}(x) \u0026amp;= \\dfrac{1}{6\\pi^2}\\int_{x}^{\\infty} dz \\dfrac{(z^2-x^2)^{3/2}}{e^{z}\\pm1} \\end{align}$$\nLet’s define functions for these quantities. We will negelect $g$ and factors of $T$ for now since they only contribute scaling.\nusing QuadGK \u0026#34;\u0026#34;\u0026#34; nbar(x, stats) Integral representation of n̄ # Arguments -`x::Float64`: mass of particle divided by temperature -`stats::Symbol`: `:boson` or `:fermion` \u0026#34;\u0026#34;\u0026#34; function nbar(x::Float64, stats::Symbol) pf::Float64 = 1 / (2π^2) function integrand(z::Float64) if stats == :boson return z * sqrt(z^2 - x^2) / (exp(z) - 1) elseif stats == :fermion return z * sqrt(z^2 - x^2) / (exp(z) + 1) else return 0.0 end end return quadgk(integrand, x, Inf)[1] / (2π^2) end \u0026#34;\u0026#34;\u0026#34; ρbar(x, stats) Integral representation of ρ̄ # Arguments -`x::Float64`: mass of particle divided by temperature -`stats::Symbol`: `:boson` or `:fermion` \u0026#34;\u0026#34;\u0026#34; function ρbar(x::Float64, stats::Symbol) function integrand(z::Float64) if stats == :boson return z^2 * sqrt(z^2 - x^2) / (exp(z) - 1) elseif stats == :fermion return z^2 * sqrt(z^2 - x^2) / (exp(z) + 1) else return 0.0 end end return quadgk(integrand, x, Inf)[1] / (2π^2) end \u0026#34;\u0026#34;\u0026#34; pbar(x, stats) Integral representation of p̄ # Arguments -`x::Float64`: mass of particle divided by temperature -`stats::Symbol`: `:boson` or `:fermion` \u0026#34;\u0026#34;\u0026#34; function pbar(x::Float64, stats::Symbol) function integrand(z::Float64) if stats == :boson return (z^2 - x^2)^1.5 / (exp(z) - 1) elseif stats == :fermion return (z^2 - x^2)^1.5 / (exp(z) + 1) else return 0.0 end end return quadgk(integrand, x, Inf)[1] / (6π^2) end;  Let’s plot the results of these functions:\nimport PyPlot; const plt = PyPlot # python plotting using LaTeXStrings xs = 10 .^(range(-1, stop=1, length=100)) nbar_fermions = [nbar(x, :fermion) for x in xs] ρbar_fermions = [ρbar(x, :fermion) for x in xs] pbar_fermions = [pbar(x, :fermion) for x in xs] nbar_bosons = [nbar(x, :boson) for x in xs] ρbar_bosons = [ρbar(x, :boson) for x in xs] pbar_bosons = [pbar(x, :boson) for x in xs] plt.figure(dpi=100) plt.plot(xs, nbar_fermions, label=L\u0026#34;$\\bar{n}$ fermions\u0026#34;) plt.plot(xs, ρbar_fermions, label=L\u0026#34;$\\bar{\\rho}$ fermions\u0026#34;) plt.plot(xs, pbar_fermions, label=L\u0026#34;$\\bar{P}$ fermions\u0026#34;) plt.plot(xs, nbar_bosons, \u0026#34;--\u0026#34;, label=L\u0026#34;$\\bar{n}$ bosons\u0026#34;) plt.plot(xs, ρbar_bosons, \u0026#34;--\u0026#34;, label=L\u0026#34;$\\bar{\\rho}$ bosons\u0026#34;) plt.plot(xs, pbar_bosons, \u0026#34;--\u0026#34;, label=L\u0026#34;$\\bar{P}$ bosons\u0026#34;) plt.yscale(\u0026#34;log\u0026#34;) plt.xscale(\u0026#34;log\u0026#34;) plt.xlabel(L\u0026#34;$x$\u0026#34;, fontsize=16) plt.ylim([1e-3, 1]) plt.xlim([1e-1, 1e1]) plt.legend() plt.gcf()     There are a few things to take away from this plot. The first is that the asymptotic behaviour as $x\\to\\infty$ is independent of statistics. The reseason for this is clear: as $x\\to\\infty$, the integrand starts off with a very large value of $z$ and hence, $e^{z} \\gg \\pm1$. The second thing to notice is that the asymptotic behavior of $\\bar{n}$ and $\\bar{P}$ are identical, but they differer from the asymptotic behavior of $\\bar{\\rho}$. The third thing to notice is that the differences between fermions and bosons is small. We will show why that’s the case later on.\nAsymptotic forms The integrals for the number, energy and pressure densities can be evaluated exactly for $x\\ll 1$ and $x\\gg1$. If we set $x = 0$, then the …","date":1566345600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1566345600,"objectID":"9ba9f3688ca5ba4f44bef643105e014c","permalink":"https://loganamorrison.github.io/post/thermal-distributions/","publishdate":"2019-08-21T00:00:00Z","relpermalink":"/post/thermal-distributions/","section":"post","summary":"An illustration of the equilibrium number, energy, pressure and entropy densities of relativistic thermal particles.","tags":["quantum-field-theory"],"title":"Thermal Distribution Functions","type":"post"},{"authors":["Logan Morrison","Stefano Profumo","Yan Yu"],"categories":[],"content":"","date":1556668800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646464829,"objectID":"671f235b2a57efe6d52eddf1ccbe2bbc","permalink":"https://loganamorrison.github.io/publication/melanopogenesis-2019/","publishdate":"2022-03-05T07:20:28.942046Z","relpermalink":"/publication/melanopogenesis-2019/","section":"publication","summary":"","tags":[],"title":"Melanopogenesis: dark matter of (almost) any mass and baryonic matter from the evaporation of primordial black holes weighing a ton (or less)","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}   Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://loganamorrison.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Logan A. Morrison"],"categories":["Field Theory"],"content":"Classical Calculation $\\require{cancel}$ $\\newcommand{\\bra}[1]{\\left\u0026lt; #1 \\right|}$ $\\newcommand{\\ket}[1]{\\left| #1 \\right\u0026gt;}$ $\\newcommand{\\bk}[2]{\\left\u0026lt; #1 \\middle| #2 \\right\u0026gt;}$ $\\newcommand{\\bke}[3]{\\left\u0026lt; #1 \\middle| #2 \\middle| #3 \\right\u0026gt;}$ $\\newcommand{\\Tr}{\\mathrm{Tr}}$\nWe consider a charged particle of mass $m$ scattering off a heavy nucleus. Let the impact parameter be $b$ and the energy of the impinging particle be $E$. The classical Lagrangian for a particle with charge $e$ scattering off a heavy nucleus of charge $eZ$ is: $$\\begin{align} \\mathcal{L}= T - V = \\dfrac{1}{2}m \\left(\\dfrac{d\\vec{r}}{dt}\\right)^2 - V(r) \\end{align}$$ with $$\\begin{align} V(r) = \\dfrac{e^2Z}{4\\pi r} \\end{align}$$ In the plane of scattering, we need only to consider two variables - $|\\vec{r}| = r$ and $\\theta$. We can write the derivative of $\\vec{r}$ as: $$\\begin{align} \\dfrac{d\\vec{r}}{dt} = \\dfrac{dr}{dt}\\hat{\\vec{r}} + r \\dfrac{d\\theta}{dt}\\hat{\\vec{\\theta}} \\end{align}$$ Our Lagrangian then reads: $$\\begin{align} \\mathcal{L}= \\dfrac{1}{2}m \\left(\\left(\\dfrac{dr}{dt}\\right)^2 + r^2 \\left(\\dfrac{d\\theta}{dt}\\right)^2\\right) - \\dfrac{e^2Z}{4\\pi r} \\end{align}$$ The Euler-Lagrange equation of $\\theta$ reads: $$\\begin{align} 0 = \\dfrac{\\partial\\mathcal{L}}{d\\theta} = \\dfrac{d}{dt}\\dfrac{\\partial\\mathcal{L}}{\\partial\\dot{\\theta}} = \\dfrac{d}{dt}mr^2\\dot{\\theta} \\end{align}$$ Hence, $mr^2\\dot{\\theta}$ is a constant, which is the angular momentum, $L = b\\sqrt{2mE}$. Therefore, $$\\begin{align} \\dfrac{d\\theta}{dt} = \\dfrac{L}{mr^2} \\end{align}$$ By energy conservation, we can write $$\\begin{align} E = \\dfrac{1}{2}m \\left(\\left(\\dfrac{dr}{dt}\\right)^2 + r^2 \\left(\\dfrac{d\\theta}{dt}\\right)^2\\right) + \\dfrac{e^2Z}{4\\pi r} \\end{align}$$ We can readily solve this equation for the time derivative of $r$, obtaining: $$\\begin{align} \\dfrac{dr}{dr} = \\dfrac{1}{mr}\\sqrt{2mEr^2 - \\dfrac{e^2Zm}{2\\pi}r - L^2} \\end{align}$$ We can write $$\\begin{align} \\dfrac{d\\theta}{dt} = \\dfrac{d\\theta}{dr}\\dfrac{dr}{dt} = \\dfrac{L}{mr^2} \\end{align}$$ Therefore, $$\\begin{align} \\dfrac{d\\theta}{dr} = \\dfrac{L}{mr^2}\\left(\\dfrac{dr}{dt}\\right)^{-1} = \\dfrac{L}{r\\sqrt{2mEr^2 - \\dfrac{e^2Zm}{2\\pi}r - L^2}} \\end{align}$$ This equation can be integrated to obtain the final value of $\\theta$. We would want to integrate this equation over $\\infty\\to\\infty$. We can instead integrate this equation over $r_{0}\\to\\infty$ where $r_0$ is the minimum value of $r$. The minimum value of $r$ will occur when $dr/dt = 0$, which happens when $$\\begin{align} 2mEr^2 - \\dfrac{e^2Zm}{2\\pi}r - L^2 = 0 \\end{align}$$ We can solve this equation by completing the square: $$\\begin{align} r_0 = \\dfrac{e^2Z}{8\\pi E} + \\sqrt{\\dfrac{L^2}{2mE} + \\dfrac{e^4Z^2}{64\\pi^2 E^2}} = A + \\sqrt{A^2 + b^2} \\end{align}$$ where $$\\begin{align} A \u0026amp; = \\dfrac{e^2Z}{8\\pi E} \\end{align}$$ Given these definitions, $$\\begin{align} \\theta(\\infty)-\\theta(r_{0}) = \\int_{r_{0}}^{\\infty}dr \\dfrac{b}{r\\sqrt{(r-A)^2-A^2-b^2}} \\end{align}$$ Integrating this give us: $$\\begin{align} \\theta(\\infty)-\\theta(r_{0}) = -\\dfrac{\\pi}{2} - i\\log(\\dfrac{-b+iA}{\\sqrt{A^2+b^2}}) \\end{align}$$ If we rotate our system such that $\\theta(r_0) = \\pi/2$ (which sends $\\theta\\to\\theta/2$), then we find that $$\\begin{align} \\sin(\\theta/2) = \\dfrac{A}{\\sqrt{A^2+b^2}} \\end{align}$$ We thus find that $$\\begin{align} b = A\\cot(\\theta/2) \\end{align}$$ This implies that the impact parameter as a function of $\\theta$ is $$\\begin{align} b = \\dfrac{e^2Z}{8\\pi E\\tan(\\theta/2)} \\end{align}$$ Recall that the differential scattering cross-sections is $$\\begin{align} \\dfrac{d\\sigma}{d\\Omega} = \\dfrac{b}{\\sin\\theta}\\dfrac{db}{d\\theta} \\end{align}$$ we find that $$\\begin{align} \\dfrac{d\\sigma}{d\\Omega} = \\dfrac{e^4Z^2}{256\\pi^2E^2\\sin^4(\\theta/2)} = \\dfrac{\\alpha^2Z^2}{16E^2\\sin^4(\\theta/2)} = \\dfrac{\\alpha^2Z^2}{4m^2v_i^2\\sin^4(\\theta/2)} \\end{align}$$ where $\\alpha = e^2/4\\pi$.\nQuantum Field Theory Calculation In this section, we will investigate Rutherford Scattering through the point of view of quantum field theory. We will consider the electron and positron as dynamic fields and the photon field as static. The Lagrangian we will consider is $$\\begin{align} \\mathcal{L}= \\overline{\\Psi}\\left(i\\cancel{\\partial}-m\\right)\\Psi -eA_{\\mu}\\overline{\\Psi}\\gamma^{\\mu}\\Psi \\end{align}$$ Our goal will be to calculate the differential cross-section $\\dfrac{d\\sigma}{d\\Omega}$ for an electron scattering of the static potential. The $T$ matrix element for this process, to first order in the electromagnetic coupling constant, is\n$$\\begin{align} \\langle{p’}|iT|\\rangle{p} \u0026amp; = \\bra{p’,s’}T\\exp\\left[-i\\int d^4x \\mathcal{L}_{I}(x)\\right]\\ket{p,s} \\\\ \u0026amp; = ie\\int d^4x \\bra{p’,s’}A_{\\mu}(x)\\overline{\\Psi}(x)\\gamma^{\\mu}\\Psi(x)\\ket{p,s}+ \\mathcal{O}(e^2)\\\\ \u0026amp; = ie\\overline{u}^{s’}(p’)\\gamma^{\\mu}u^s(p) \\int d^4xA_{\\mu}(x)e^{i(p’-p)x} \\end{align}$$\nNow Fourier transform the photon field:\n$$\\begin{align} A_{\\mu}(x) = \\int \\dfrac{d^4q}{(2\\pi)^4}\\tilde{A}_{\\mu}(q)e^{-iqx} …","date":1519516800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1519516800,"objectID":"8ffaf99b8c612c5b20e52c5e9257de74","permalink":"https://loganamorrison.github.io/post/rutherford-scattering/","publishdate":"2018-02-25T00:00:00Z","relpermalink":"/post/rutherford-scattering/","section":"post","summary":"In this post, we review the classical calcuation of Rutherford scattering and compare with a fully relativistic calculation at tree-level in Quantum Electrodynamics.","tags":["quantum-field-theory"],"title":"Rutherford Scattering","type":"post"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://loganamorrison.github.io/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Example Project","type":"project"},{"authors":["Logan A. Morrison","Dane Stanfield","Michael Jenkins","Alexandr A. Baronov","David L. Patrick","Janelle M. Leger"],"categories":[],"content":"","date":1451606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646465108,"objectID":"fe73e7a84f815221efb6172e8ad63b2d","permalink":"https://loganamorrison.github.io/publication/ovls-2016/","publishdate":"2022-03-05T07:25:08.799135Z","relpermalink":"/publication/ovls-2016/","section":"publication","summary":"Organic molecular crystals (OMCs) are of significant interest due to their potential use in transistors, photovoltaic devices, light emitting diodes, and other applications. However, conventional vacuum-based methods of growing crystalline OMC films are costly and provide limited control over crystal growth. In this study, we present a new method for preparing high performance single-crystal tetracene field-effect transistors under near-ambient conditions using organic vapor-liquid-solid (OVLS) deposition. We find that the mobility of OVLS-grown tetracene is comparable to high quality crystalline films prepared by physical vapor deposition. These results establish OVLS deposition as a relatively low cost, low substrate temperature, and ambient pressure method for growing high quality OMC films for device applications.","tags":["Organic-vapor-liquid-solid deposition","OFET","Tetracene","Ambient crystal growth","Organic electronics"],"title":"High performance organic field-effect transistors using ambient deposition of tetracene single crystals","type":"publication"}]